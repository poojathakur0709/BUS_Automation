# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\Testing.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING:
'''pip3 install opencv-python 
sudo apt-get install libcblas-dev
sudo apt-get install libhdf5-dev
sudo apt-get install libhdf5-serial-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install libjasper-dev 
sudo apt-get install libqtgui4 
sudo apt-get install libqt4-test
pip install -U numpy 
Any manual changes made to this file will be lost when pyuic5 is
'''
# run again.  Do not edit this file unless you know what you are doing.
import json
#FEEDBACK SENSOR DATA
import RPi.GPIO as GPIO

from PyQt5 import QtCore, QtGui, QtWidgets
#time module
import time
#qt import
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
#importing the ui file
import source_rc
#importing request module
import requests
#importing json module
import json
#importing cv
import cv2


#importing Os , Random
import os
import random
#importing pygame 
from pygame import mixer
from mutagen.mp3 import MP3

#import dbus for BLE
import dbus, dbus.mainloop.glib
import sys
from gi.repository import GLib

#importing Libraries for FM
import smbus as smbus 
import subprocess

#importing Serial
import serial
try:
    ser = serial.Serial('/dev/ttyUSB0',9600,timeout=1)
    ser.flush()
except:
    pass

#Creating variable for USB Player
mixer.init()
musiclist=[]
play = False
current_song = None
count = 0
songLength = 0
index = 0

#Creating Variable for feedback Sensor
Feedback= 10 #change Feedback value to change pin no
GPIO.setwarnings(False) # Ignore warning for now
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering
GPIO.setup(Feedback, GPIO.IN, pull_up_down=GPIO.PUD_UP)
Relay = 16#change to chnge relay no.
GPIO.setup(Relay, GPIO.OUT)
#creating Variable for FM Radio
i2c = smbus.SMBus(1) # newer version RASP (512 megabytes)
i2c_address = 0x60


class Ui_MainWindow(object):
    #BLE Variable
    status="playing"
    track = "no Music"
    player_iface = None
    transport_prop_iface = None
    bus = None
    obj = None
    mgr=None 
    #FM Variable
    freq = 93.4
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        MainWindow.setStyleSheet("background-color: rgb(17,17,17);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.NotificationPanel = QtWidgets.QLabel(self.centralwidget)
        self.NotificationPanel.setGeometry(QtCore.QRect(0, 0, 1280, 70))
        self.NotificationPanel.setStyleSheet("background: transparent;\n"
"border-bottom:2px solid rgb(255, 255, 255);")
        self.NotificationPanel.setObjectName("NotificationPanel")
        
        #Time Label
        self.TimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.TimeLabel.setGeometry(QtCore.QRect(10, 16, 160, 38))
        self.TimeLabel.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"color: rgb(255, 255, 255);\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 30px;")
        self.TimeLabel.setObjectName("TimeLabel")
        self.CloudEnableIcon = QtWidgets.QLabel(self.centralwidget)
        self.CloudEnableIcon.setGeometry(QtCore.QRect(165, 15, 40, 40))
        self.CloudEnableIcon.setText("")
        self.CloudEnableIcon.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CloudEnableIcon.png"))
        self.CloudEnableIcon.setAlignment(QtCore.Qt.AlignCenter)
        self.CloudEnableIcon.setObjectName("CloudEnableIcon")
        self.TemperatureLabel = QtWidgets.QLabel(self.centralwidget)
        self.TemperatureLabel.setGeometry(QtCore.QRect(1180, 16, 90, 38))
        self.TemperatureLabel.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 30px;\n"
"color: rgb(255, 255, 255);")
        self.TemperatureLabel.setObjectName("TemperatureLabel")
        self.FuelBoxLabel = QtWidgets.QLabel(self.centralwidget)
        self.FuelBoxLabel.setGeometry(QtCore.QRect(1086, 15, 66, 40))
        self.FuelBoxLabel.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 4px;")
        self.FuelBoxLabel.setText("")
        self.FuelBoxLabel.setObjectName("FuelBoxLabel")
        self.FuelBar1 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar1.setGeometry(QtCore.QRect(1088, 18, 7, 34))
        self.FuelBar1.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar1.setText("")
        self.FuelBar1.setObjectName("FuelBar1")
        self.FuelBar2 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar2.setGeometry(QtCore.QRect(1097, 18, 7, 34))
        self.FuelBar2.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar2.setText("")
        self.FuelBar2.setObjectName("FuelBar2")
        self.FuelBar3 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar3.setGeometry(QtCore.QRect(1106, 18, 7, 34))
        self.FuelBar3.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar3.setText("")
        self.FuelBar3.setObjectName("FuelBar3")
        self.FuelBar4 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar4.setGeometry(QtCore.QRect(1115, 18, 7, 34))
        self.FuelBar4.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar4.setText("")
        self.FuelBar4.setObjectName("FuelBar4")
        self.FuelBar5 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar5.setGeometry(QtCore.QRect(1124, 18, 7, 34))
        self.FuelBar5.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar5.setText("")
        self.FuelBar5.setObjectName("FuelBar5")
        self.FuelBar6 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar6.setGeometry(QtCore.QRect(1133, 18, 7, 34))
        self.FuelBar6.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar6.setText("")
        self.FuelBar6.setObjectName("FuelBar6")
        self.FuelBar7 = QtWidgets.QLabel(self.centralwidget)
        self.FuelBar7.setGeometry(QtCore.QRect(1142, 18, 7, 34))
        self.FuelBar7.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-radius: 2px;")
        self.FuelBar7.setText("")
        self.FuelBar7.setObjectName("FuelBar7")
        self.NetworkEnableIcon = QtWidgets.QLabel(self.centralwidget)
        self.NetworkEnableIcon.setGeometry(QtCore.QRect(1022, 15, 40, 40))
        self.NetworkEnableIcon.setText("")
        self.NetworkEnableIcon.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/NetworkEnableIcon.png"))
        self.NetworkEnableIcon.setObjectName("NetworkEnableIcon")

        #BLE ICON
        self.BTOFFIcon=QtWidgets.QPushButton(self.centralwidget)
        self.BTOFFIcon.setGeometry(QtCore.QRect(962, 15, 40, 40))
        self.BTOFFIcon.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"border-radius: 4px;")
        self.BTOFFIcon.setText("")
        self.BTOFFIcon.setObjectName("BTOFFIcon")
        
        self.BTOFFIcon.setIconSize(QtCore.QSize(40, 40))
        self.BTOFFIcon.clicked.connect(self.BluetoothStart)
        icon0 = QtGui.QIcon()
        icon0.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/BTOnIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BTOFFIcon.setIcon(icon0)
        
        
        self.MainMenu = QtWidgets.QTabWidget(self.centralwidget)
        self.MainMenu.setGeometry(QtCore.QRect(0, 70, 1280, 650))
        self.MainMenu.setMinimumSize(QtCore.QSize(130, 130))
        self.MainMenu.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.MainMenu.setStyleSheet("QTabBar::tab:selected {\n"
"background-color: rgb(144, 216, 255);\n"
"\n"
"}\n"
"QTabBar::tab{\n"
"background-color: rgb(255, 255, 255);\n"
"padding:24px 0 0 0;\n"
"}")
        self.MainMenu.setTabPosition(QtWidgets.QTabWidget.East)
        self.MainMenu.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.MainMenu.setIconSize(QtCore.QSize(90, 130))
        self.MainMenu.setElideMode(QtCore.Qt.ElideMiddle)
        self.MainMenu.setTabsClosable(False)
        self.MainMenu.setObjectName("MainMenu")
        
        
        self.MusicTab = QtWidgets.QWidget()
        self.MusicTab.setObjectName("MusicTab")
        self.MusicMenu = QtWidgets.QTabWidget(self.MusicTab)
        self.MusicMenu.setGeometry(QtCore.QRect(0, 0, 1150, 650))
        self.MusicMenu.setStyleSheet("QTabBar::tab:selected {\n"
"background-color: rgb(255, 255, 255);\n"
"\n"
"}\n"
"QTabBar::tab{\n"
"background-color: rgb(144, 216, 255);\n"
"padding:0 0 30px 0;\n"
"}")
        self.MusicMenu.setTabPosition(QtWidgets.QTabWidget.West)
        self.MusicMenu.setIconSize(QtCore.QSize(84, 130))
        self.MusicMenu.setObjectName("MusicMenu")
        
        #FM Tab
        self.FMTab = QtWidgets.QWidget()
        self.FMTab.setObjectName("FMTab")
        self.ChannelFrequencyLabel = QtWidgets.QLabel(self.FMTab)
        self.ChannelFrequencyLabel.setGeometry(QtCore.QRect(373, 136, 205, 91))
        self.ChannelFrequencyLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 72px;\n"
"line-height: 91px;")
        self.ChannelFrequencyLabel.setObjectName("ChannelFrequencyLabel")
        self.MegaHertzLabel = QtWidgets.QLabel(self.FMTab)
        self.MegaHertzLabel.setGeometry(QtCore.QRect(590, 150, 90, 90))
        self.MegaHertzLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 36px;\n"
"line-height: 91px;")
        self.MegaHertzLabel.setObjectName("MegaHertzLabel")
        self.FMForwardButton = QtWidgets.QPushButton(self.FMTab)
        self.FMForwardButton.setGeometry(QtCore.QRect(843, 136, 90, 110))
        #self.FMForwardButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/FMForwardButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.FMForwardButton.setIcon(icon)
        self.FMForwardButton.setIconSize(QtCore.QSize(40, 71))
        self.FMForwardButton.setObjectName("FMForwardButton")
        #Single CLicekd
        self.FMForwardButton.clicked.connect(self.nextSingle_fm)
        #Double Clicked
        #self.FMForwardButton.itemDoubleClicked.connect(self.nextDouble_fm)
        
        self.FMBackwardButton = QtWidgets.QPushButton(self.FMTab)
        self.FMBackwardButton.setGeometry(QtCore.QRect(137, 136, 90, 110))
        #self.FMBackwardButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/FMBackwardButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.FMBackwardButton.setIcon(icon1)
        self.FMBackwardButton.setIconSize(QtCore.QSize(40, 71))
        self.FMBackwardButton.setObjectName("FMBackwardButton")
        #Single CLicekd
        self.FMBackwardButton.clicked.connect(self.prevSingle_fm)
        #Double Clicked
        #self.FMBackwardButton.itemDoubleClicked.connect(self.prevDouble_fm)
        
        self.Channel1Button = QtWidgets.QPushButton(self.FMTab)
        self.Channel1Button.setGeometry(QtCore.QRect(100, 320, 140, 140))
        self.Channel1Button.setStyleSheet("border:1px solid rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 60px;")
        self.Channel1Button.setObjectName("Channel1Button")
        self.Channel1Button.clicked.connect(self.Channel1ButtonClicked)
        
        
        self.Channel2Button = QtWidgets.QPushButton(self.FMTab)
        self.Channel2Button.setGeometry(QtCore.QRect(270, 320, 140, 140))
        self.Channel2Button.setStyleSheet("border:1px solid rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 60px;")
        self.Channel2Button.setObjectName("Channel2Button")
        self.Channel2Button.clicked.connect(self.Channel2ButtonClicked)
        
        
        self.Channel3Button = QtWidgets.QPushButton(self.FMTab)
        self.Channel3Button.setGeometry(QtCore.QRect(440, 320, 140, 140))
        self.Channel3Button.setStyleSheet("border:1px solid rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 60px;")
        self.Channel3Button.setObjectName("Channel3Button")
        self.Channel3Button.clicked.connect(self.Channel3ButtonClicked)
        
        
        self.Channel4Button = QtWidgets.QPushButton(self.FMTab)
        self.Channel4Button.setGeometry(QtCore.QRect(610, 320, 140, 140))
        self.Channel4Button.setStyleSheet("border:1px solid rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 60px;")
        self.Channel4Button.setObjectName("Channel4Button")
        self.Channel4Button.clicked.connect(self.Channel4ButtonClicked)
        
        
        
        self.Channel5Button = QtWidgets.QPushButton(self.FMTab)
        self.Channel5Button.setGeometry(QtCore.QRect(780, 320, 140, 140))
        self.Channel5Button.setStyleSheet("border:1px solid rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 60px;")
        self.Channel5Button.setObjectName("Channel5Button")
        self.Channel5Button.clicked.connect(self.Channel5ButtonClicked)
        
        self.FMControlPanelBox = QtWidgets.QLabel(self.FMTab)
        self.FMControlPanelBox.setGeometry(QtCore.QRect(0, 550, 1020, 100))
        self.FMControlPanelBox.setStyleSheet("border-top:1px solid rgb(255, 255, 255);")
        self.FMControlPanelBox.setObjectName("FMControlPanelBox")
        self.BandFMButton = QtWidgets.QPushButton(self.FMTab)
        self.BandFMButton.setGeometry(QtCore.QRect(330, 552, 120, 100))
        self.BandFMButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/BandFMIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BandFMButton.setIcon(icon2)
        self.BandFMButton.setIconSize(QtCore.QSize(46, 51))
        self.BandFMButton.setObjectName("BandFMButton")
        self.FMcontrolLine1 = QtWidgets.QFrame(self.FMTab)
        self.FMcontrolLine1.setGeometry(QtCore.QRect(450, 575, 1, 50))
        self.FMcontrolLine1.setStyleSheet("color: rgb(255, 255, 255);")
        self.FMcontrolLine1.setFrameShadow(QtWidgets.QFrame.Plain)
        self.FMcontrolLine1.setFrameShape(QtWidgets.QFrame.VLine)
        self.FMcontrolLine1.setObjectName("FMcontrolLine1")
        self.BandFMStationButton = QtWidgets.QPushButton(self.FMTab)
        self.BandFMStationButton.setGeometry(QtCore.QRect(451, 552, 118, 100))
        self.BandFMStationButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/StationFMIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BandFMStationButton.setIcon(icon3)
        self.BandFMStationButton.setIconSize(QtCore.QSize(63, 47))
        self.BandFMStationButton.setObjectName("BandFMStationButton")
        self.FMControlLine2 = QtWidgets.QFrame(self.FMTab)
        self.FMControlLine2.setGeometry(QtCore.QRect(570, 575, 1, 50))
        self.FMControlLine2.setStyleSheet("color: rgb(255, 255, 255);")
        self.FMControlLine2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.FMControlLine2.setFrameShape(QtWidgets.QFrame.VLine)
        self.FMControlLine2.setObjectName("FMControlLine2")
        self.TuneFMButton = QtWidgets.QPushButton(self.FMTab)
        self.TuneFMButton.setGeometry(QtCore.QRect(571, 552, 120, 100))
        self.TuneFMButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/TuneFMIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.TuneFMButton.setIcon(icon4)
        self.TuneFMButton.setIconSize(QtCore.QSize(41, 47))
        self.TuneFMButton.setObjectName("TuneFMButton")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/FMTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MusicMenu.addTab(self.FMTab, icon5, "")
        
        
        
        
        
        
        #Bluetooth Music Player Tab
        self.BTTab = QtWidgets.QWidget()
        self.BTTab.setObjectName("BTTab")
        #BLE CODE
        
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        self.bus = dbus.SystemBus()
        self.obj = self.bus.get_object('org.bluez', "/")
        self.mgr = dbus.Interface(self.obj, 'org.freedesktop.DBus.ObjectManager')
        
        
        self.BTControlPanelBox = QtWidgets.QLabel(self.BTTab)
        self.BTControlPanelBox.setGeometry(QtCore.QRect(0, 550, 1020, 100))
        self.BTControlPanelBox.setStyleSheet("border-top:1px solid rgb(255, 255, 255);")
        self.BTControlPanelBox.setText("")
        self.BTControlPanelBox.setObjectName("BTControlPanelBox")
        self.PreviousSongBTButton = QtWidgets.QPushButton(self.BTTab)
        self.PreviousSongBTButton.setGeometry(QtCore.QRect(360, 552, 100, 100))
        self.PreviousSongBTButton.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PreviousSongButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PreviousSongBTButton.setIcon(icon6)
        self.PreviousSongBTButton.setIconSize(QtCore.QSize(40, 40))
        self.PreviousSongBTButton.setObjectName("PreviousSongBTButton")
        self.BTcontrolLine1 = QtWidgets.QFrame(self.BTTab)
        #Previous song command
        self.PreviousSongBTButton.clicked.connect(self.previous_song_BT)
        
        self.BTcontrolLine1.setGeometry(QtCore.QRect(461, 575, 1, 50))
        self.BTcontrolLine1.setStyleSheet("color: rgb(255, 255, 255);")
        self.BTcontrolLine1.setFrameShadow(QtWidgets.QFrame.Plain)
        self.BTcontrolLine1.setFrameShape(QtWidgets.QFrame.VLine)
        self.BTcontrolLine1.setObjectName("BTcontrolLine1")
        self.PlaySongBTButton = QtWidgets.QPushButton(self.BTTab)
        self.PlaySongBTButton.setGeometry(QtCore.QRect(462, 552, 98, 100))
        self.PlaySongBTButton.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PauseSongIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PlaySongBTButton.setIcon(icon7)
        self.PlaySongBTButton.setIconSize(QtCore.QSize(40, 40))
        self.PlaySongBTButton.setObjectName("PlaySongBTButton")
        #Play Pause Command
        self.PlaySongBTButton.clicked.connect(self.Play_Pause_BT)

        self.BTcontrolLine2 = QtWidgets.QFrame(self.BTTab)
        self.BTcontrolLine2.setGeometry(QtCore.QRect(560, 575, 1, 50))
        self.BTcontrolLine2.setStyleSheet("color: rgb(255, 255, 255);")
        self.BTcontrolLine2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.BTcontrolLine2.setFrameShape(QtWidgets.QFrame.VLine)
        self.BTcontrolLine2.setObjectName("BTcontrolLine2")
        self.NextSongBTButton = QtWidgets.QPushButton(self.BTTab)
        self.NextSongBTButton.setGeometry(QtCore.QRect(561, 552, 100, 100))
        self.NextSongBTButton.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/NextSongButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.NextSongBTButton.setIcon(icon8)
        self.NextSongBTButton.setIconSize(QtCore.QSize(40, 40))
        self.NextSongBTButton.setObjectName("NextSongBTButton")
        #Next Song Command 
        self.NextSongBTButton.clicked.connect(self.next_song_BT)
        
        self.PlayerIconBT = QtWidgets.QLabel(self.BTTab)
        self.PlayerIconBT.setGeometry(QtCore.QRect(410, 65, 200, 200))
        self.PlayerIconBT.setText("")
        self.PlayerIconBT.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayerIcon.png"))
        self.PlayerIconBT.setObjectName("PlayerIconBT")
        self.SongNameBTLabel = QtWidgets.QLabel(self.BTTab)
        self.SongNameBTLabel.setGeometry(QtCore.QRect(260, 310, 500, 45))
        self.SongNameBTLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 36px;\n"
"line-height: 45px;\n"
"text-align: center;")
        self.SongNameBTLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.SongNameBTLabel.setObjectName("SongNameBTLabel")
        self.AlbumNameBTLabel = QtWidgets.QLabel(self.BTTab)
        self.AlbumNameBTLabel.setGeometry(QtCore.QRect(260, 365, 500, 45))
        self.AlbumNameBTLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 36px;\n"
"line-height: 45px;\n"
"text-align: center;")
        self.AlbumNameBTLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.AlbumNameBTLabel.setObjectName("AlbumNameBTLabel")
        self.ArtistNameBTLabel = QtWidgets.QLabel(self.BTTab)
        self.ArtistNameBTLabel.setGeometry(QtCore.QRect(260, 420, 500, 45))
        self.ArtistNameBTLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 36px;\n"
"line-height: 45px;\n"
"text-align: center;")
        self.ArtistNameBTLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.ArtistNameBTLabel.setObjectName("ArtistNameBTLabel")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/BTTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MusicMenu.addTab(self.BTTab, icon9, "")
        
        
        
        
        #USB Music Player Tab
        self.USBTab = QtWidgets.QWidget()
        self.USBTab.setObjectName("USBTab")
        self.ReloadUSBButton = QtWidgets.QPushButton(self.USBTab)
        self.ReloadUSBButton.setGeometry(QtCore.QRect(0, 0, 400, 60))
        self.ReloadUSBButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"border:2px solid rgb(144,216,255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 23px;\n"
"")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/ReloadUSBButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ReloadUSBButton.setIcon(icon10)
        self.ReloadUSBButton.setObjectName("ReloadUSBButton")
        #added song function AddSongUSB
        self.ReloadUSBButton.clicked.connect(self.AddSongUSB)
        
        self.SongListBox = QtWidgets.QListWidget(self.USBTab)
        self.SongListBox.setGeometry(QtCore.QRect(0, 60, 400, 491))
        self.SongListBox.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"color: rgb(255, 255, 255);\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 23px;\n"
"border:1px solid rgb(255, 255, 255);")
        self.SongListBox.setTextElideMode(QtCore.Qt.ElideLeft)
        self.SongListBox.setObjectName("SongListBox")
        #adding double click function to play song
        self.SongListBox.itemDoubleClicked.connect(self.PlaySongFromListUSB)
        self.USBControlPanelBox = QtWidgets.QLabel(self.USBTab)
        self.USBControlPanelBox.setGeometry(QtCore.QRect(0, 550, 1020, 100))
        self.USBControlPanelBox.setStyleSheet("border-top:1px solid rgb(255, 255, 255);")
        self.USBControlPanelBox.setText("")
        self.USBControlPanelBox.setObjectName("USBControlPanelBox")
        self.PlayerIcon = QtWidgets.QLabel(self.USBTab)
        self.PlayerIcon.setGeometry(QtCore.QRect(610, 70, 200, 200))
        self.PlayerIcon.setText("")
        self.PlayerIcon.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayerIcon.png"))
        self.PlayerIcon.setObjectName("PlayerIcon")
        self.SongNameUSBLabel = QtWidgets.QLabel(self.USBTab)
        self.SongNameUSBLabel.setGeometry(QtCore.QRect(485, 305, 450, 45))
        self.SongNameUSBLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 36px;\n"
"line-height: 45px;\n"
"text-align: center;")
        self.SongNameUSBLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.SongNameUSBLabel.setObjectName("SongNameUSBLabel")
        self.ProgressBarUSB = QtWidgets.QProgressBar(self.USBTab)
        self.ProgressBarUSB.setGeometry(QtCore.QRect(550, 430, 320, 5))
        self.ProgressBarUSB.setStyleSheet("QProgressBar::chunk {\n"
"    background-color: rgb(144,216,255);\n"
"}")
        self.ProgressBarUSB.setProperty("value", 24)
        self.ProgressBarUSB.setTextVisible(False)
        self.ProgressBarUSB.setObjectName("ProgressBarUSB")
        self.SongCurrentTimeLabel = QtWidgets.QLabel(self.USBTab)
        self.SongCurrentTimeLabel.setGeometry(QtCore.QRect(470, 420, 60, 25))
        self.SongCurrentTimeLabel.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 23px;\n"
"color: rgb(255, 255, 255);")
        self.SongCurrentTimeLabel.setObjectName("SongCurrentTimeLabel")
        self.SongTotalTimeLabel = QtWidgets.QLabel(self.USBTab)
        self.SongTotalTimeLabel.setGeometry(QtCore.QRect(890, 420, 60, 25))
        self.SongTotalTimeLabel.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 23px;\n"
"color: rgb(255, 255, 255);")
        self.SongTotalTimeLabel.setObjectName("SongTotalTimeLabel")
        self.PreviousSongUSBButton = QtWidgets.QPushButton(self.USBTab)
        self.PreviousSongUSBButton.setGeometry(QtCore.QRect(360, 552, 100, 100))
        self.PreviousSongUSBButton.setText("")
        self.PreviousSongUSBButton.setIcon(icon6)
        self.PreviousSongUSBButton.setIconSize(QtCore.QSize(40, 40))
        self.PreviousSongUSBButton.setObjectName("PreviousSongUSBButton")
        #added function PreviousSongUSB
        self.PreviousSongUSBButton.clicked.connect(self.PreviousSongUSB)
        self.USBcontrolLine1 = QtWidgets.QFrame(self.USBTab)
        self.USBcontrolLine1.setGeometry(QtCore.QRect(461, 575, 1, 50))
        self.USBcontrolLine1.setStyleSheet("color: rgb(255, 255, 255);")
        self.USBcontrolLine1.setFrameShadow(QtWidgets.QFrame.Plain)
        self.USBcontrolLine1.setFrameShape(QtWidgets.QFrame.VLine)
        self.USBcontrolLine1.setObjectName("USBcontrolLine1")
        self.PlaySongUSBButton = QtWidgets.QPushButton(self.USBTab)
        self.PlaySongUSBButton.setGeometry(QtCore.QRect(462, 552, 98, 100))
        self.PlaySongUSBButton.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PlaySongUSBButton.setIcon(icon11)
        self.PlaySongUSBButton.setIconSize(QtCore.QSize(40, 40))
        self.PlaySongUSBButton.setObjectName("PlaySongUSBButton")
        #added function PlaySongUSB
        self.PlaySongUSBButton.clicked.connect(self.PlaySongUSB)
        self.USBcontrolLine2 = QtWidgets.QFrame(self.USBTab)
        self.USBcontrolLine2.setGeometry(QtCore.QRect(560, 575, 1, 50))
        self.USBcontrolLine2.setStyleSheet("color: rgb(255, 255, 255);")
        self.USBcontrolLine2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.USBcontrolLine2.setFrameShape(QtWidgets.QFrame.VLine)
        self.USBcontrolLine2.setObjectName("USBcontrolLine2")
        self.NextSongUSBButton = QtWidgets.QPushButton(self.USBTab)
        self.NextSongUSBButton.setGeometry(QtCore.QRect(561, 552, 100, 100))
        self.NextSongUSBButton.setText("")
        self.NextSongUSBButton.setIcon(icon8)
        self.NextSongUSBButton.setIconSize(QtCore.QSize(40, 40))
        self.NextSongUSBButton.setObjectName("NextSongUSBButton")
        #added function NextSongUSB
        self.NextSongUSBButton.clicked.connect(self.NextSongUSB)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/USBTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MusicMenu.addTab(self.USBTab, icon12, "")
        
        
        
        
        self.AuxTab = QtWidgets.QWidget()
        self.AuxTab.setObjectName("AuxTab")
        self.AUXONButton = QtWidgets.QRadioButton(self.AuxTab)
        self.AUXONButton.setGeometry(QtCore.QRect(510, 200, 200, 100))
        self.AUXONButton.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"color: rgb(255, 255, 255);\n"
"font-style: normal;\n"
"font-weight: bold;\n"
"font-size: 96px;\n"
"line-height: 121px;\n"
"")
        self.AUXONButton.setIconSize(QtCore.QSize(80, 80))
        self.AUXONButton.setObjectName("AUXONButton")
        self.AUXONButton.toggled.connect(self.RelayOn)        
        
        self.AUXOFFButton = QtWidgets.QRadioButton(self.AuxTab)
        self.AUXOFFButton.setGeometry(QtCore.QRect(510, 340, 230, 100))
        self.AUXOFFButton.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"color: rgb(255, 255, 255);\n"
"font-style: normal;\n"
"font-weight: bold;\n"
"font-size: 96px;\n"
"line-height: 121px;")
        self.AUXOFFButton.setIconSize(QtCore.QSize(80, 80))
        self.AUXOFFButton.setObjectName("AUXOFFButton")
        self.AUXOFFButton.toggled.connect(self.RelayOFF) 
        self.AUXIcon = QtWidgets.QLabel(self.AuxTab)
        self.AUXIcon.setGeometry(QtCore.QRect(70, 100, 350, 400))
        self.AUXIcon.setText("")
        self.AUXIcon.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/AuxIcon.png"))
        self.AUXIcon.setObjectName("AUXIcon")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/AuxTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MusicMenu.addTab(self.AuxTab, icon13, "")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/MusicTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MainMenu.addTab(self.MusicTab, icon14, "")
        
        
        #Phone Tab
        self.PhoneTab = QtWidgets.QWidget()
        self.PhoneTab.setObjectName("PhoneTab")
        
        
        self.Person1Button =  QtWidgets.QPushButton(self.PhoneTab)
        self.Person1Button.setGeometry(QtCore.QRect(50, 75, 300, 60))
        self.Person1Button.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"border-radius:5px;\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        #self.Person1Button.setAlignment(QtCore.Qt.AlignCenter)
        self.Person1Button.setObjectName("Person1Button")
        self.Person1Button.clicked.connect(self.Person1Api)

        
        self.Person2Button =  QtWidgets.QPushButton(self.PhoneTab)
        self.Person2Button.setGeometry(QtCore.QRect(50, 185, 300, 60))
        self.Person2Button.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"border-radius:5px;\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        #self.Person2Button.setAlignment(QtCore.Qt.AlignCenter)
        self.Person2Button.setObjectName("Person2Button")
        self.Person2Button.clicked.connect(self.Person2Api)
        
        self.Person3Button =  QtWidgets.QPushButton(self.PhoneTab)
        self.Person3Button.setGeometry(QtCore.QRect(50, 295, 300, 60))
        self.Person3Button.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"border-radius:5px;\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        #self.Person3Button.setAlignment(QtCore.Qt.AlignCenter)
        self.Person3Button.setObjectName("Person3Button")
        self.Person3Button.clicked.connect(self.Person3Api)
        
        self.Person4Button =  QtWidgets.QPushButton(self.PhoneTab)
        self.Person4Button.setGeometry(QtCore.QRect(50, 405, 300, 60))
        self.Person4Button.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"border-radius:5px;\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        #self.Person4Button.setAlignment(QtCore.Qt.AlignCenter)
        self.Person4Button.setObjectName("Person4Button")
        self.Person4Button.clicked.connect(self.Person4Api)
        
        self.Person5Button =  QtWidgets.QPushButton(self.PhoneTab)
        self.Person5Button.setGeometry(QtCore.QRect(50, 515, 300, 60))
        self.Person5Button.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"border-radius:5px;\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        #self.Person5Button.setAlignment(QtCore.Qt.AlignCenter)
        self.Person5Button.setObjectName("Person5Button")
        self.Person5Button.clicked.connect(self.Person5Api)
        
        self.PhoneTabLine = QtWidgets.QFrame(self.PhoneTab)
        self.PhoneTabLine.setGeometry(QtCore.QRect(400, 0, 2, 650))
        self.PhoneTabLine.setStyleSheet("color: rgb(255, 255, 255);")
        self.PhoneTabLine.setFrameShadow(QtWidgets.QFrame.Plain)
        self.PhoneTabLine.setLineWidth(2)
        self.PhoneTabLine.setFrameShape(QtWidgets.QFrame.VLine)
        self.PhoneTabLine.setObjectName("PhoneTabLine")
        self.PhoneBGImage = QtWidgets.QLabel(self.PhoneTab)
        self.PhoneBGImage.setGeometry(QtCore.QRect(575, 125, 400, 400))
        self.PhoneBGImage.setText("")
        self.PhoneBGImage.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PhoneIcon.png"))
        self.PhoneBGImage.setObjectName("PhoneBGImage")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PhoneTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MainMenu.addTab(self.PhoneTab, icon15, "")
        
        
        
        self.CameraTab = QtWidgets.QWidget()
        self.CameraTab.setObjectName("CameraTab")
        self.CameraMenuBox = QtWidgets.QLabel(self.CameraTab)
        self.CameraMenuBox.setGeometry(QtCore.QRect(0, 0, 130, 650))
        self.CameraMenuBox.setStyleSheet("background-color: rgb(144, 216, 255);")
        self.CameraMenuBox.setText("")
        self.CameraMenuBox.setObjectName("CameraMenuBox")
        #Gallery view Button
        self.GalleryViewButton = QtWidgets.QPushButton(self.CameraTab)
        self.GalleryViewButton.setGeometry(QtCore.QRect(15, 15, 100, 100))
        self.GalleryViewButton.setStyleSheet("background-color: transparent;\n"
"color: rgb(0, 0, 0);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius:5px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 18px;\n"
"text-align: center;\n"
"text-transform: capitalize;\n"
"\n"
"\n"
"\n"
"  \n"
"")
        self.GalleryViewButton.setObjectName("GalleryViewButton")
        self.GalleryViewButton.clicked.connect(self.GalleryViewFunction)#Gallery View Function
        #BackCamera View Button
        self.BackCameraButton = QtWidgets.QPushButton(self.CameraTab)
        self.BackCameraButton.setGeometry(QtCore.QRect(15, 145, 100, 100))
        self.BackCameraButton.setStyleSheet("background-color: transparent;\n"
"color: rgb(0, 0, 0);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius:5px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 18px;\n"
"text-align: center;\n"
"text-transform: capitalize;")
        self.BackCameraButton.setObjectName("BackCameraButton")
        self.BackCameraButton.clicked.connect(self.BackCameraViewFunction)#Back Camera Function
        
        
        self.FrontCameraButton = QtWidgets.QPushButton(self.CameraTab)
        self.FrontCameraButton.setGeometry(QtCore.QRect(15, 275, 100, 100))
        self.FrontCameraButton.setStyleSheet("background-color: transparent;\n"
"color: rgb(0, 0, 0);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius:5px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 18px;\n"
"text-align: center;\n"
"text-transform: capitalize;")
        self.FrontCameraButton.setObjectName("FrontCameraButton")
        self.Camera1Button = QtWidgets.QPushButton(self.CameraTab)
        self.Camera1Button.setGeometry(QtCore.QRect(15, 405, 100, 100))
        self.Camera1Button.setStyleSheet("background-color: transparent;\n"
"color: rgb(0, 0, 0);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius:5px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 18px;\n"
"text-align: center;\n"
"text-transform: capitalize;")
        self.Camera1Button.setObjectName("Camera1Button")
        self.Camera2Button = QtWidgets.QPushButton(self.CameraTab)
        self.Camera2Button.setGeometry(QtCore.QRect(15, 535, 100, 100))
        self.Camera2Button.setStyleSheet("background-color: transparent;\n"
"color: rgb(0, 0, 0);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius:5px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 18px;\n"
"line-height: 18px;\n"
"text-align: center;\n"
"text-transform: capitalize;")
        self.Camera2Button.setObjectName("Camera2Button")
        self.BackCameraView = QtWidgets.QLabel(self.CameraTab)
        self.BackCameraView.setGeometry(QtCore.QRect(130, 0, 510, 325))
        self.BackCameraView.setStyleSheet("color: rgb(255, 255, 255);\n"
"border:1px solid rgb(255,255,255);")
        self.BackCameraView.setText("")
        self.BackCameraView.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CameraBGIcon.png"))
        self.BackCameraView.setAlignment(QtCore.Qt.AlignCenter)
        self.BackCameraView.setObjectName("BackCameraView")
        self.FrontCameraView = QtWidgets.QLabel(self.CameraTab)
        self.FrontCameraView.setGeometry(QtCore.QRect(640, 0, 510, 325))
        self.FrontCameraView.setStyleSheet("color: rgb(255, 255, 255);\n"
"border:1px solid rgb(255,255,255);")
        self.FrontCameraView.setText("")
        self.FrontCameraView.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CameraBGIcon.png"))
        self.FrontCameraView.setAlignment(QtCore.Qt.AlignCenter)
        self.FrontCameraView.setObjectName("FrontCameraView")
        self.Camera1View = QtWidgets.QLabel(self.CameraTab)
        self.Camera1View.setGeometry(QtCore.QRect(640, 325, 510, 325))
        self.Camera1View.setStyleSheet("color: rgb(255, 255, 255);\n"
"border:1px solid rgb(255,255,255);")
        self.Camera1View.setText("")
        self.Camera1View.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CameraBGIcon.png"))
        self.Camera1View.setAlignment(QtCore.Qt.AlignCenter)
        self.Camera1View.setObjectName("Camera1View")
        self.Camera2View = QtWidgets.QLabel(self.CameraTab)
        self.Camera2View.setGeometry(QtCore.QRect(130, 325, 510, 325))
        self.Camera2View.setStyleSheet("color: rgb(255, 255, 255);\n"
"border:1px solid rgb(255,255,255);")
        self.Camera2View.setText("")
        self.Camera2View.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CameraBGIcon.png"))
        self.Camera2View.setAlignment(QtCore.Qt.AlignCenter)
        self.Camera2View.setObjectName("Camera2View")
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/CameraTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MainMenu.addTab(self.CameraTab, icon16, "")
        self.StatusTab = QtWidgets.QWidget()
        self.StatusTab.setObjectName("StatusTab")
        self.StatusMenu = QtWidgets.QTabWidget(self.StatusTab)
        self.StatusMenu.setGeometry(QtCore.QRect(0, 0, 1150, 650))
        self.StatusMenu.setStyleSheet("QTabBar::tab:selected {\n"
"background-color: rgb(255, 255, 255);\n"
"\n"
"}\n"
"QTabBar::tab{\n"
"background-color: rgb(144, 216, 255);\n"
"padding:0 0 30px 0;\n"
"}")
        self.StatusMenu.setTabPosition(QtWidgets.QTabWidget.West)
        self.StatusMenu.setIconSize(QtCore.QSize(84, 130))
        self.StatusMenu.setObjectName("StatusMenu")
        self.ColorPickerTab = QtWidgets.QWidget()
        self.ColorPickerTab.setObjectName("ColorPickerTab")
        #rgb button 1
        self.RGB1Button = QtWidgets.QPushButton(self.ColorPickerTab)
        self.RGB1Button.setGeometry(QtCore.QRect(100, 60, 200, 200))
        self.RGB1Button.setStyleSheet("border-color:rbg(17,17,17);")
        #self.RGB1Button.setText("")
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/RGBIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.RGB1Button.setIcon(icon17)
        self.RGB1Button.setIconSize(QtCore.QSize(200, 200))
        self.RGB1Button.setObjectName("RGB1Button")
        self.RGB1Button.clicked.connect(self.RGB1ColorPicker)#opened color picker
        self.RGB1Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.RGB1Label.setGeometry(QtCore.QRect(161, 270, 80, 30))
        self.RGB1Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.RGB1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.RGB1Label.setObjectName("RGB1Label")
        #rgb button 2
        self.RGB2Button = QtWidgets.QPushButton(self.ColorPickerTab)
        self.RGB2Button.setGeometry(QtCore.QRect(400, 60, 200, 200))
        self.RGB2Button.setStyleSheet("border-color:rbg(17,17,17);")
        #self.RGB2Button.setText("")
        self.RGB2Button.setIcon(icon17)
        self.RGB2Button.setIconSize(QtCore.QSize(200, 200))
        self.RGB2Button.setObjectName("RGB2Button")
        self.RGB2Button.clicked.connect(self.RGB2ColorPicker)#opened color picker
        self.RGB2Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.RGB2Label.setGeometry(QtCore.QRect(461, 270, 80, 30))
        self.RGB2Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.RGB2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.RGB2Label.setObjectName("RGB2Label")
        #rgb button 3
        self.RGB3Button = QtWidgets.QPushButton(self.ColorPickerTab)
        self.RGB3Button.setGeometry(QtCore.QRect(100, 350, 200, 200))
        self.RGB3Button.setStyleSheet("border-color: rgb(17,17,17);")
        #self.RGB3Button.setText("")
        self.RGB3Button.setIcon(icon17)
        self.RGB3Button.setIconSize(QtCore.QSize(200, 200))
        self.RGB3Button.setObjectName("RGB3Button")
        self.RGB3Button.clicked.connect(self.RGB3ColorPicker)#opened color picker
        self.RGB3Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.RGB3Label.setGeometry(QtCore.QRect(161, 560, 80, 30))
        self.RGB3Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.RGB3Label.setAlignment(QtCore.Qt.AlignCenter)
        self.RGB3Label.setObjectName("RGB3Label")
        #rgb button 4
        self.RGB4Button = QtWidgets.QPushButton(self.ColorPickerTab)
        self.RGB4Button.setGeometry(QtCore.QRect(400, 350, 200, 200))
        self.RGB4Button.setStyleSheet("border-color: rgb(17,17,17);")
        #self.RGB4Button.setText("")
        self.RGB4Button.setIcon(icon17)
        self.RGB4Button.setIconSize(QtCore.QSize(200, 200))
        self.RGB4Button.setObjectName("RGB4Button")
        self.RGB4Button.clicked.connect(self.RGB4ColorPicker)#opened color picker
        self.RGB4Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.RGB4Label.setGeometry(QtCore.QRect(461, 560, 80, 30))
        self.RGB4Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.RGB4Label.setAlignment(QtCore.Qt.AlignCenter)
        self.RGB4Label.setObjectName("RGB4Label")
        #Dimmer 1
        self.Dimmer1Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.Dimmer1Label.setGeometry(QtCore.QRect(690, 560, 105, 30))
        self.Dimmer1Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.Dimmer1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Dimmer1Label.setObjectName("Dimmer1Label")
        self.Dimmer2Label = QtWidgets.QLabel(self.ColorPickerTab)
        self.Dimmer2Label.setGeometry(QtCore.QRect(828, 560, 109, 30))
        self.Dimmer2Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 30px;\n"
"text-align: center;")
        self.Dimmer2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Dimmer2Label.setObjectName("Dimmer2Label")
        #Dimmer 1 Slider
        self.VerticalSliderDimmer1 = QtWidgets.QSlider(self.ColorPickerTab)
        self.VerticalSliderDimmer1.setGeometry(QtCore.QRect(722, 65, 40, 485))
        self.VerticalSliderDimmer1.setStyleSheet("QSlider::groove:vertical {\n"
"    border: 1px solid white;\n"
"    border-radius:10px;\n"
"    }\n"
"QSlider::handle:vertical {\n"
"    border: 1px solid black;\n"
"    border-radius: 10px;\n"
"    background-color: blue;\n"
"    height: 40px;\n"
"    width: 40px;\n"
"    }\n"
"")
        self.VerticalSliderDimmer1.setOrientation(QtCore.Qt.Vertical)
        self.VerticalSliderDimmer1.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.VerticalSliderDimmer1.setObjectName("VerticalSliderDimmer1")
        self.VerticalSliderDimmer1.setMinimum(0)#min
        self.VerticalSliderDimmer1.setMaximum(255)#max
        self.VerticalSliderDimmer1.setValue(125)#default
        self.VerticalSliderDimmer1.valueChanged.connect(self.Dimmer1Value)#value changed function      
        #Dimmer 2 Slider
        self.VerticalSliderDimmer2 = QtWidgets.QSlider(self.ColorPickerTab)
        self.VerticalSliderDimmer2.setGeometry(QtCore.QRect(862, 65, 40, 485))
        self.VerticalSliderDimmer2.setStyleSheet("QSlider::groove:vertical {\n"
"    border: 1px solid white;\n"
"    border-radius:10px;\n"
"    }\n"
"QSlider::handle:vertical {\n"
"    border: 1px solid black;\n"
"    border-radius: 10px;\n"
"    background-color: blue;\n"
"    height: 40px;\n"
"    width: 40px;\n"
"    }")
        self.VerticalSliderDimmer2.setOrientation(QtCore.Qt.Vertical)
        self.VerticalSliderDimmer2.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.VerticalSliderDimmer2.setObjectName("VerticalSliderDimmer2")
        self.VerticalSliderDimmer2.setMinimum(0)#min
        self.VerticalSliderDimmer2.setMaximum(255)#max
        self.VerticalSliderDimmer2.setValue(125)#default
        self.VerticalSliderDimmer2.valueChanged.connect(self.Dimmer2Value)#value changed function

        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/ColorPickerIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.StatusMenu.addTab(self.ColorPickerTab, icon18, "")
        self.FireHydrantTab = QtWidgets.QWidget()
        self.FireHydrantTab.setObjectName("FireHydrantTab")
        self.FireHydrantWeight = QtWidgets.QLabel(self.FireHydrantTab)
        self.FireHydrantWeight.setGeometry(QtCore.QRect(250, 120, 340, 340))
        self.FireHydrantWeight.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 288px;\n"
"line-height: 363px;\n"
"/* identical to box height */\n"
"\n"
"text-align: center;")
        self.FireHydrantWeight.setObjectName("FireHydrantWeight")
        self.KgWeightLabel = QtWidgets.QLabel(self.FireHydrantTab)
        self.KgWeightLabel.setGeometry(QtCore.QRect(590, 320, 174, 121))
        self.KgWeightLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 96px;\n"
"line-height: 121px;\n"
"/* identical to box height */\n"
"\n"
"text-align: center;")
        self.KgWeightLabel.setObjectName("KgWeightLabel")
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/FireHydrantIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.StatusMenu.addTab(self.FireHydrantTab, icon19, "")
        
        
        
        self.MapsTab = QtWidgets.QWidget()
        self.MapsTab.setObjectName("MapsTab")
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/MapsIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.StatusMenu.addTab(self.MapsTab, icon20, "")
        self.SettingsTab = QtWidgets.QWidget()
        self.SettingsTab.setObjectName("SettingsTab")
        self.LoginLabel = QtWidgets.QLabel(self.SettingsTab)
        self.LoginLabel.setGeometry(QtCore.QRect(432, 115, 155, 43))
        self.LoginLabel.setStyleSheet("font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 48px;\n"
"line-height: 90%;\n"
"/* or 32px */\n"
"\n"
"text-align: center;\n"
"text-transform: uppercase;\n"
"\n"
"color: rgb(255, 255, 255);")
        self.LoginLabel.setObjectName("LoginLabel")
        self.UserNameInput = QtWidgets.QLineEdit(self.SettingsTab)
        self.UserNameInput.setGeometry(QtCore.QRect(260, 225, 500, 60))
        self.UserNameInput.setStyleSheet("border: 2px solid rgb(255, 255, 255);;\n"
"box-sizing: border-box;\n"
"border-radius: 10px;")
        self.UserNameInput.setObjectName("UserNameInput")
        self.UserNameLabel = QtWidgets.QLabel(self.SettingsTab)
        self.UserNameLabel.setGeometry(QtCore.QRect(267, 198, 117, 22))
        self.UserNameLabel.setStyleSheet("\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 90%;\n"
"/* or 16px */\n"
"\n"
"\n"
"color: rgb(255, 255, 255);")
        self.UserNameLabel.setObjectName("UserNameLabel")
        self.PasswordLabel = QtWidgets.QLabel(self.SettingsTab)
        self.PasswordLabel.setGeometry(QtCore.QRect(267, 300, 113, 22))
        self.PasswordLabel.setStyleSheet("\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 90%;\n"
"/* or 16px */\n"
"\n"
"\n"
"color: rgb(255, 255, 255);")
        self.PasswordLabel.setObjectName("PasswordLabel")
        self.PasswordInput = QtWidgets.QLineEdit(self.SettingsTab)
        self.PasswordInput.setGeometry(QtCore.QRect(260, 325, 500, 60))
        self.PasswordInput.setStyleSheet("border: 2px solid rgb(255, 255, 255);;\n"
"box-sizing: border-box;\n"
"border-radius: 10px;")
        self.PasswordInput.setObjectName("PasswordInput")
        self.LoginButton = QtWidgets.QPushButton(self.SettingsTab)
        self.LoginButton.setGeometry(QtCore.QRect(260, 402, 500, 60))
        self.LoginButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"\n"
"border-radius: 10px;\n"
"font-family: Plus Jakarta Sans;\n"
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 24px;\n"
"line-height: 90%;")
        self.LoginButton.setObjectName("LoginButton")
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/SettingsIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.StatusMenu.addTab(self.SettingsTab, icon21, "")
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/StatusTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MainMenu.addTab(self.StatusTab, icon22, "")
        self.ParkingTab = QtWidgets.QWidget()
        self.ParkingTab.setObjectName("ParkingTab")
        self.SoundButtonParking = QtWidgets.QLabel(self.ParkingTab)
        self.SoundButtonParking.setGeometry(QtCore.QRect(33, 533, 80, 80))
        self.SoundButtonParking.setText("")
        self.SoundButtonParking.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/ParkingSpeakerIcon.png"))
        self.SoundButtonParking.setObjectName("SoundButtonParking")
        self.BusIcon = QtWidgets.QLabel(self.ParkingTab)
        self.BusIcon.setGeometry(QtCore.QRect(280, 190, 583, 171))
        self.BusIcon.setText("")
        self.BusIcon.setPixmap(QtGui.QPixmap(":/NotificationPanel/icons/BusIcon.png"))
        self.BusIcon.setObjectName("BusIcon")
        self.Sensor1Line6 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line6.setGeometry(QtCore.QRect(860, 120, 70, 70))
        self.Sensor1Line6.setStyleSheet("background: transparent;\n"
"border-top-right-radius:63px;\n"
"border-top:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
        self.Sensor1Line6.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line6.setObjectName("Sensor1Line6")
        self.Sensor1Line5 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line5.setGeometry(QtCore.QRect(860, 130, 60, 60))
        self.Sensor1Line5.setStyleSheet("background: transparent;\n"
"border-top-right-radius:54px;\n"
"border-top:5px solid  rgb(255,255,179);\n"
"border-right:5px solid rgb(255,255,179);")
        self.Sensor1Line5.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line5.setObjectName("Sensor1Line5")
        self.Sensor1Line4 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line4.setGeometry(QtCore.QRect(860, 140, 50, 50))
        self.Sensor1Line4.setStyleSheet("background: transparent;\n"
"border-top-right-radius:45px;\n"
"border-top:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
        self.Sensor1Line4.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line4.setObjectName("Sensor1Line4")
        self.Sensor1Line3 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line3.setGeometry(QtCore.QRect(860, 150, 40, 40))
        self.Sensor1Line3.setStyleSheet("background: transparent;\n"
"border-top-right-radius:36px;\n"
"border-top:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
        self.Sensor1Line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line3.setObjectName("Sensor1Line3")
        self.Sensor1Line2 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line2.setGeometry(QtCore.QRect(860, 160, 30, 30))
        self.Sensor1Line2.setStyleSheet("background: transparent;\n"
"border-top-right-radius:27px;\n"
"border-top:5px solid rgb(255,150,150);\n"
"border-right:5px solid  rgb(255,150,150);")
        self.Sensor1Line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line2.setObjectName("Sensor1Line2")
        self.Sensor1Line1 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor1Line1.setGeometry(QtCore.QRect(860, 170, 20, 20))
        self.Sensor1Line1.setStyleSheet("background: transparent;\n"
"border-top-right-radius:18px;\n"
"border-top:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
        self.Sensor1Line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor1Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor1Line1.setObjectName("Sensor1Line1")
        self.Sensor4Line6 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line6.setGeometry(QtCore.QRect(860, 360, 70, 70))
        self.Sensor4Line6.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:63px;\n"
"border-bottom:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
        self.Sensor4Line6.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line6.setObjectName("Sensor4Line6")
        self.Sensor4Line5 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line5.setGeometry(QtCore.QRect(860, 360, 60, 60))
        self.Sensor4Line5.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:54px;\n"
"border-bottom:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
        self.Sensor4Line5.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line5.setObjectName("Sensor4Line5")
        self.Sensor4Line4 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line4.setGeometry(QtCore.QRect(860, 360, 50, 50))
        self.Sensor4Line4.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:45px;\n"
"border-bottom:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
        self.Sensor4Line4.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line4.setObjectName("Sensor4Line4")
        self.Sensor4Line3 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line3.setGeometry(QtCore.QRect(860, 360, 40, 40))
        self.Sensor4Line3.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:36px;\n"
"border-bottom:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
        self.Sensor4Line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line3.setObjectName("Sensor4Line3")
        self.Sensor4Line2 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line2.setGeometry(QtCore.QRect(860, 360, 30, 30))
        self.Sensor4Line2.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:27px;\n"
"border-bottom:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
        self.Sensor4Line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line2.setObjectName("Sensor4Line2")
        self.Sensor4Line1 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor4Line1.setGeometry(QtCore.QRect(860, 360, 20, 20))
        self.Sensor4Line1.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:18px;\n"
"border-bottom:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
        self.Sensor4Line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor4Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor4Line1.setObjectName("Sensor4Line1")
        self.Sensor2Line1 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line1.setGeometry(QtCore.QRect(880, 230, 10, 40))
        self.Sensor2Line1.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor2Line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line1.setObjectName("Sensor2Line1")
        self.Sensor3line1 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3line1.setGeometry(QtCore.QRect(880, 280, 10, 40))
        self.Sensor3line1.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor3line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3line1.setObjectName("Sensor3line1")
        self.Sensor2Line2 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line2.setGeometry(QtCore.QRect(900, 222, 10, 48))
        self.Sensor2Line2.setStyleSheet("background:  rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor2Line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line2.setObjectName("Sensor2Line2")
        self.Sensor3Line2 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line2.setGeometry(QtCore.QRect(900, 280, 10, 48))
        self.Sensor3Line2.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor3Line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line2.setObjectName("Sensor3Line2")
        self.Sensor2Line3 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line3.setGeometry(QtCore.QRect(920, 214, 10, 56))
        self.Sensor2Line3.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor2Line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line3.setObjectName("Sensor2Line3")
        self.Sensor3Line3 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line3.setGeometry(QtCore.QRect(920, 280, 10, 56))
        self.Sensor3Line3.setStyleSheet("background:rgb(255,150,150);\n"
"border-radius: 5px;")
        self.Sensor3Line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line3.setObjectName("Sensor3Line3")
        self.Sensor2Line4 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line4.setGeometry(QtCore.QRect(940, 204, 10, 64))
        self.Sensor2Line4.setStyleSheet("background:rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor2Line4.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line4.setObjectName("Sensor2Line4")
        self.Sensor2Line5 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line5.setGeometry(QtCore.QRect(960, 198, 10, 72))
        self.Sensor2Line5.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor2Line5.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line5.setObjectName("Sensor2Line5")
        self.Sensor2Line6 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line6.setGeometry(QtCore.QRect(980, 190, 10, 80))
        self.Sensor2Line6.setStyleSheet("background:  rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor2Line6.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line6.setObjectName("Sensor2Line6")
        self.Sensor3Line7 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line7.setGeometry(QtCore.QRect(1000, 180, 10, 88))
        self.Sensor3Line7.setStyleSheet("background: rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor3Line7.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line7.setObjectName("Sensor3Line7")
        self.Sensor2Line8 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line8.setGeometry(QtCore.QRect(1020, 172, 10, 96))
        self.Sensor2Line8.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor2Line8.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line8.setObjectName("Sensor2Line8")
        self.Sensor2Line9 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line9.setGeometry(QtCore.QRect(1040, 164, 10, 104))
        self.Sensor2Line9.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor2Line9.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line9.setObjectName("Sensor2Line9")
        self.Sensor3Line4 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line4.setGeometry(QtCore.QRect(940, 280, 10, 64))
        self.Sensor3Line4.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor3Line4.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line4.setObjectName("Sensor3Line4")
        self.Sensor3Line5 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line5.setGeometry(QtCore.QRect(960, 280, 10, 72))
        self.Sensor3Line5.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor3Line5.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line5.setObjectName("Sensor3Line5")
        self.Sensor3Line6 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line6.setGeometry(QtCore.QRect(980, 280, 10, 80))
        self.Sensor3Line6.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
        self.Sensor3Line6.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line6.setObjectName("Sensor3Line6")
        self.Sensor2Line7 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor2Line7.setGeometry(QtCore.QRect(1000, 280, 10, 88))
        self.Sensor2Line7.setStyleSheet("background: rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor2Line7.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor2Line7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor2Line7.setObjectName("Sensor2Line7")
        self.Sensor3Line8 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line8.setGeometry(QtCore.QRect(1020, 280, 10, 96))
        self.Sensor3Line8.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor3Line8.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line8.setObjectName("Sensor3Line8")
        self.Sensor3Line9 = QtWidgets.QFrame(self.ParkingTab)
        self.Sensor3Line9.setGeometry(QtCore.QRect(1040, 280, 10, 104))
        self.Sensor3Line9.setStyleSheet("background :rgb(255,255,179);\n"
"border-radius: 5px;")
        self.Sensor3Line9.setFrameShape(QtWidgets.QFrame.VLine)
        self.Sensor3Line9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Sensor3Line9.setObjectName("Sensor3Line9")
        self.SoundButtonParking.raise_()
        self.BusIcon.raise_()
        self.Sensor1Line6.raise_()
        self.Sensor1Line5.raise_()
        self.Sensor1Line4.raise_()
        self.Sensor1Line3.raise_()
        self.Sensor1Line2.raise_()
        self.Sensor1Line1.raise_()
        self.Sensor4Line6.raise_()
        self.Sensor4Line5.raise_()
        self.Sensor4Line4.raise_()
        self.Sensor4Line3.raise_()
        self.Sensor4Line2.raise_()
        self.Sensor4Line1.raise_()
        self.Sensor2Line1.raise_()
        self.Sensor3line1.raise_()
        self.Sensor2Line2.raise_()
        self.Sensor3Line2.raise_()
        self.Sensor2Line3.raise_()
        self.Sensor3Line3.raise_()
        self.Sensor2Line5.raise_()
        self.Sensor2Line6.raise_()
        self.Sensor3Line7.raise_()
        self.Sensor2Line8.raise_()
        self.Sensor2Line9.raise_()
        self.Sensor3Line4.raise_()
        self.Sensor3Line5.raise_()
        self.Sensor3Line6.raise_()
        self.Sensor2Line7.raise_()
        self.Sensor3Line8.raise_()
        self.Sensor3Line9.raise_()
        self.Sensor2Line4.raise_()
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/ParkingTabIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MainMenu.addTab(self.ParkingTab, icon23, "")

        #started back camera
        #self.StartBackCamera()
        #self.BluetoothStart()
        #Time Label Timer
        self.TimeLabelTimer=QTimer()
        self.TimeLabelTimer.timeout.connect(self.UpdateTime)
        self.TimeLabelTimer.start(4000)#1 minute  #10 to try 
        #SerialTimer
        #self.SerialTimer=QTimer()
        #self.SerialTimer.timeout.connect(self.SerialTime)
        #self.SerialTimer.start(600)#1 minute  #10 to try 

        #Progress Bar Timer 
        self.ProgressBarTimer = QTimer()
        self.ProgressBarTimer.setInterval(1000)
        self.ProgressBarTimer.timeout.connect(self.updateprogressbar)       
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.MainMenu.setCurrentIndex(4)
        self.MusicMenu.setCurrentIndex(3)
        self.StatusMenu.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    

    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.NotificationPanel.setText(_translate("MainWindow", "TextLabel"))
        self.TimeLabel.setText(_translate("MainWindow", "10:20 AM"))
        self.TemperatureLabel.setText(_translate("MainWindow", "<html><head/><body><p>25°C</p></body></html>"))
        self.ChannelFrequencyLabel.setText(_translate("MainWindow", "93.5"))
        self.MegaHertzLabel.setText(_translate("MainWindow", "MHz"))
        self.Channel1Button.setText(_translate("MainWindow", "1"))
        self.Channel2Button.setText(_translate("MainWindow", "2"))
        self.Channel3Button.setText(_translate("MainWindow", "3"))
        self.Channel4Button.setText(_translate("MainWindow", "4"))
        self.Channel5Button.setText(_translate("MainWindow", "5"))
        self.FMControlPanelBox.setText(_translate("MainWindow", "TextLabel"))
        self.SongNameBTLabel.setText(_translate("MainWindow", "Sakhiyan 2.0-Bell Bottom 2021"))
        self.AlbumNameBTLabel.setText(_translate("MainWindow", "Saregama Music"))
        self.ArtistNameBTLabel.setText(_translate("MainWindow", "Arijit Singh & Pritam"))
        self.ReloadUSBButton.setText(_translate("MainWindow", "  Reload Songs"))
        self.SongNameUSBLabel.setText(_translate("MainWindow", "Sakhiyan 2.0-Bell Bottom 2021"))
        self.SongCurrentTimeLabel.setText(_translate("MainWindow", "00:00"))
        self.SongTotalTimeLabel.setText(_translate("MainWindow", "00:00"))
        self.AUXONButton.setText(_translate("MainWindow", "ON"))
        self.AUXOFFButton.setText(_translate("MainWindow", "OFF"))
        self.Person1Button.setText(_translate("MainWindow", "Person 1"))
        self.Person2Button.setText(_translate("MainWindow", "Person 2"))
        self.Person3Button.setText(_translate("MainWindow", "Person 3"))
        self.Person4Button.setText(_translate("MainWindow", "Person 4"))
        self.Person5Button.setText(_translate("MainWindow", "Person 5"))
        self.GalleryViewButton.setText(_translate("MainWindow", "Gallery\n"
"View"))
        self.BackCameraButton.setText(_translate("MainWindow", "Back\n"
"Camera"))
        self.FrontCameraButton.setText(_translate("MainWindow", "Front\n"
"Camera"))
        self.Camera1Button.setText(_translate("MainWindow", "Camera-1"))
        self.Camera2Button.setText(_translate("MainWindow", "Camera-2"))
        self.RGB1Label.setText(_translate("MainWindow", "RGB-1"))
        self.RGB2Label.setText(_translate("MainWindow", "RGB-2"))
        self.RGB3Label.setText(_translate("MainWindow", "RGB-3"))
        self.RGB4Label.setText(_translate("MainWindow", "RGB-4"))
        self.Dimmer1Label.setText(_translate("MainWindow", "Dimmer 1"))
        self.Dimmer2Label.setText(_translate("MainWindow", "Dimmer 2"))
        self.FireHydrantWeight.setText(_translate("MainWindow", "69"))
        self.KgWeightLabel.setText(_translate("MainWindow", "kgs"))
        self.LoginLabel.setText(_translate("MainWindow", "LOGIN"))
        self.UserNameLabel.setText(_translate("MainWindow", "Username"))
        self.PasswordLabel.setText(_translate("MainWindow", "Password"))
        self.LoginButton.setText(_translate("MainWindow", "LOGIN"))
        #def SerialTime(self):
     #   if ser.in_waiting >0:
      #      line = ser.readline()
      #      print(line)
        
    '''def UpdateTime(self):
        #Time Label Timer update function
        a=time.strftime("%H:%M %p")
        self.TimeLabel.setText(a)

        #self.BluetoothStart()
        if ser.in_waiting >0:
            line = ser.readline()
            try:
                line = line.decode("utf-8")
            except:
                pass
            print(line)
        else:
            pass
            
        if GPIO.input(Feedback) == GPIO.HIGH:
                #print("Button was pushed!")
                pass
        elif GPIO.input(Feedback) == GPIO.LOW:
                #print("Button was pushed LOW!")
                #self.StartBackCamera()
                pass'''
    
    def UpdateTime(self):#Time Label Timer update function
            #all Sensors Line normal style sheet
            self.Sensor1Line6.setStyleSheet("background: transparent;\n"
"border-top-right-radius:63px;\n"
"border-top:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
            self.Sensor1Line5.setStyleSheet("background: transparent;\n"
"border-top-right-radius:54px;\n"
"border-top:5px solid  rgb(255,255,179);\n"
"border-right:5px solid rgb(255,255,179);")
            self.Sensor1Line4.setStyleSheet("background: transparent;\n"
"border-top-right-radius:45px;\n"
"border-top:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
            self.Sensor1Line3.setStyleSheet("background: transparent;\n"
"border-top-right-radius:36px;\n"
"border-top:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
            self.Sensor1Line2.setStyleSheet("background: transparent;\n"
"border-top-right-radius:27px;\n"
"border-top:5px solid rgb(255,150,150);\n"
"border-right:5px solid  rgb(255,150,150);")
            self.Sensor1Line1.setStyleSheet("background: transparent;\n"
"border-top-right-radius:18px;\n"
"border-top:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
            self.Sensor4Line6.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:63px;\n"
"border-bottom:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
            self.Sensor4Line5.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:54px;\n"
"border-bottom:5px solid  rgb(255,255,179);\n"
"border-right:5px solid  rgb(255,255,179);")
            self.Sensor4Line4.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:45px;\n"
"border-bottom:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
            self.Sensor4Line3.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:36px;\n"
"border-bottom:5px solid rgb(255,215,179);\n"
"border-right:5px solid rgb(255,215,179);")
            self.Sensor4Line2.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:27px;\n"
"border-bottom:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
            self.Sensor4Line1.setStyleSheet("background: transparent;\n"
"border-bottom-right-radius:18px;\n"
"border-bottom:5px solid rgb(255,150,150);\n"
"border-right:5px solid rgb(255,150,150);")
            self.Sensor2Line1.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor3line1.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor2Line2.setStyleSheet("background:  rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor3Line2.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor2Line3.setStyleSheet("background: rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor3Line3.setStyleSheet("background:rgb(255,150,150);\n"
"border-radius: 5px;")
            self.Sensor2Line4.setStyleSheet("background:rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor2Line5.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor2Line6.setStyleSheet("background:  rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor3Line7.setStyleSheet("background: rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor2Line8.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor2Line9.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor3Line4.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor3Line5.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor3Line6.setStyleSheet("background: rgb(255,215,179);\n"
"border-radius: 5px;")
            self.Sensor2Line7.setStyleSheet("background: rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor3Line8.setStyleSheet("background:  rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor3Line9.setStyleSheet("background :rgb(255,255,179);\n"
"border-radius: 5px;")
            self.Sensor1Line1.setStyleSheet
            a=time.strftime("%H:%M %p")
            self.TimeLabel.setText(a)
        # import random
        # color=["R","O","Y"]
        # color1=random.choice(color)
            try:
                if ser.in_waiting >0:
                        line = ser.readline()
                        line = line.decode("utf-8")
                        line=json.loads(line)
                        parking_sensor_data=line
                        print(parking_sensor_data)
                        if GPIO.input(Feedback) == GPIO.LOW:
                                
                                self.StartBackCamera()
                                self.MainMenu.setCurrentIndex(3)
                                if "DBU" in parking_sensor_data:


                                        if parking_sensor_data["DBC"]=="R":
                                                self.Sensor2Line1.setStyleSheet("background:red;border-radius: 5px;")
                                                self.Sensor3line1.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor2Line2.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor3Line2.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor2Line3.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor3Line3.setStyleSheet("background: red;border-radius: 5px;")
                                        elif parking_sensor_data["DBC"]=="O":
                                                self.Sensor2Line4.setStyleSheet("background:orange;border-radius: 5px;")
                                                self.Sensor3Line4.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor2Line5.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor3Line5.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor2Line6.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor3Line6.setStyleSheet("background: orange;border-radius: 5px;")
                                        elif parking_sensor_data["DBC"]=="Y":
                                                self.Sensor2Line7.setStyleSheet("background:yellow;border-radius: 5px;")
                                                self.Sensor3Line7.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor2Line8.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor3Line8.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor2Line9.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor3Line9.setStyleSheet("background: yellow;border-radius: 5px;")
                                        
                                        #print("parking2")
                                        if parking_sensor_data["DBD"]=="R":
                                                self.Sensor2Line1.setStyleSheet("background:red;border-radius: 5px;")
                                                self.Sensor2Line2.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor2Line3.setStyleSheet("background: red;border-radius: 5px;")
                                        elif parking_sensor_data["DBD"]=="O":
                                                self.Sensor2Line4.setStyleSheet("background:orange;border-radius: 5px;")
                                                self.Sensor2Line5.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor2Line6.setStyleSheet("background: orange;border-radius: 5px;")
                                        elif parking_sensor_data["DBD"]=="Y":
                                                self.Sensor2Line7.setStyleSheet("background:yellow;border-radius: 5px;")
                                                self.Sensor2Line8.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor2Line9.setStyleSheet("background: yellow;border-radius: 5px;")
                                        


                                        
                                        if parking_sensor_data["DBUU"]=="R":
                                                self.Sensor3line1.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor3Line2.setStyleSheet("background: red;border-radius: 5px;")
                                                self.Sensor3Line3.setStyleSheet("background: red;border-radius: 5px;")
                                        elif parking_sensor_data["DBUU"]=="O":
                                                self.Sensor3Line4.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor3Line5.setStyleSheet("background: orange;border-radius: 5px;")
                                                self.Sensor3Line6.setStyleSheet("background: orange;border-radius: 5px;")
                                        elif parking_sensor_data["DBUU"]=="Y":
                                                self.Sensor3Line7.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor3Line8.setStyleSheet("background: yellow;border-radius: 5px;")
                                                self.Sensor3Line9.setStyleSheet("background: yellow;border-radius: 5px;")
                                        
                                        
                                        if parking_sensor_data["DBU"]=="R":
                                                self.Sensor1Line1.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:18px;\n"
                "border-top:5px solid red;\n"
                "border-right:5px solid red;")
                                                self.Sensor1Line2.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:27px;\n"
                "border-top:5px solid red;\n"
                "border-right:5px solid red;")
                                        elif parking_sensor_data["DBU"]=="O":
                                                self.Sensor1Line3.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:18px;\n"
                "border-top:5px solid orange;\n"
                "border-right:5px solid orange;")
                                                self.Sensor1Line4.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:27px;\n"
                "border-top:5px solid orange;\n"
                "border-right:5px solid orange;")
                                        elif parking_sensor_data["DBU"]=="Y":
                                                self.Sensor1Line5.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:18px;\n"
                "border-top:5px solid yellow;\n"
                "border-right:5px solid yellow;")
                                                self.Sensor1Line6.setStyleSheet("background: transparent;\n"
                "border-top-right-radius:27px;\n"
                "border-top:5px solid yellow;\n"
                "border-right:5px solid yellow;")
                                        
                                        
                                        if parking_sensor_data["DBDD"]=="R":
                                                self.Sensor4Line1.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:18px;\n"
                "border-bottom:5px solid  red;\n"
                "border-right:5px solid red;")
                                                self.Sensor4Line2.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:27px;\n"
                "border-bottom:5px solid  red;\n"
                "border-right:5px solid red;")
                #orange
                                        
                                        
                                        elif parking_sensor_data["DBDD"]=="O":
                                                self.Sensor4Line3.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:18px;\n"
                "border-bottom:5px solid  orange;\n"
                "border-right:5px solid orange;")
                                                self.Sensor4Line4.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:27px;\n"
                "border-bottom:5px solid  orange;\n"
                "border-right:5px solid orange;")
                                        elif parking_sensor_data["DBDD"]=="Y":
                                                self.Sensor4Line5.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:18px;\n"
                "border-bottom:5px solid  yellow;\n"
                "border-right:5px solid yellow;")
                                                self.Sensor4Line6.setStyleSheet("background: transparent;\n"
                "border-bottom-right-radius:27px;\n"
                "border-bottom:5px solid  yellow;\n"
                "border-right:5px solid yellow;")
                                        
                #yellow
        


                        else:
                                self.StopBackCamera()
                                #GPRS LOCATION SEND
                                if "Fuel Centre" in parking_sensor_data  :
                                        #Add Api Add to send data to cloud
                                        if parking_sensor_data["Fuel Centre"]==0:
                                                self.FuelBar1.hide()
                                                self.FuelBar2.hide()
                                                self.FuelBar3.hide()
                                                self.FuelBar4.hide()
                                                self.FuelBar5.hide()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==1:
                                                self.FuelBar1.show()
                                                self.FuelBar2.hide()
                                                self.FuelBar3.hide()
                                                self.FuelBar4.hide()
                                                self.FuelBar5.hide()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==2:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.hide()
                                                self.FuelBar4.hide()
                                                self.FuelBar5.hide()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==3:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.show()
                                                self.FuelBar4.hide()
                                                self.FuelBar5.hide()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==4:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.show()
                                                self.FuelBar4.show()
                                                self.FuelBar5.hide()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==5:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.show()
                                                self.FuelBar4.show()
                                                self.FuelBar5.show()
                                                self.FuelBar6.hide()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==6:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.show()
                                                self.FuelBar4.show()
                                                self.FuelBar5.show()
                                                self.FuelBar6.show()
                                                self.FuelBar7.hide()
                                        elif parking_sensor_data['Fuel Centre']==7:
                                                self.FuelBar1.show()
                                                self.FuelBar2.show()
                                                self.FuelBar3.show()
                                                self.FuelBar4.show()
                                                self.FuelBar5.show()
                                                self.FuelBar6.show()
                                                self.FuelBar7.show()
                                        if parking_sensor_data["Temperature"]:
                                                #Add Api Add to send data to cloud
                                                self.TemperatureLabel.setText(parking_sensor_data["Temperature"])
                                elif "Weight" in parking_sensor_data  :
                                        #Add Api Add to send data to cloud
                                        self.FireHydrantWeight.setText(parking_sensor_data["Weight"])
                                

                                
            except:
                pass
 
    def RGB1ColorPicker(self):#open color picker for RGB1
        try:
                self.RGB1ColorPicker=QColorDialog()
                self.RGB1ColorPicker.show()
                self.RGB1ColorPicker.exec_()
                RGB1Color=self.RGB1ColorPicker.selectedColor()
                red=RGB1Color.red()
                green=RGB1Color.green()
                blue=RGB1Color.blue()
                print(red,green,blue)
                url="https://ibsbus.herokuapp.com/rgbapi/rgb/1/"
                #payload={"id":1,"device_name":"RGB1","red":233,"green":43,"blue":43}
                payload={"id":1,"device_name":"RGB1","red":red,"green":green,"blue":blue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
                print(response.text)
        except:
                print("..")


    def RGB2ColorPicker(self):#open color picker for RGB2
        try:
                        
                self.RGB2ColorPicker=QColorDialog()
                self.RGB2ColorPicker.show()
                self.RGB2ColorPicker.exec_()
                RGB2Color=self.RGB2ColorPicker.selectedColor()
                red=RGB2Color.red()
                green=RGB2Color.green()
                blue = RGB2Color.blue()
                url="https://ibsbus.herokuapp.com/rgbapi/rgb/2/"
                #payload={"id":2,"device_name":"RGB2","red":233,"green":43,"blue":43}
                payload={"id":2,"device_name":"RGB2","red":red,"green":green,"blue":blue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
                print(response.text)
        except:
                pass
    def RGB3ColorPicker(self):#open color picker for RGB3
        try:
                        
                self.RGB3ColorPicker=QColorDialog()
                self.RGB3ColorPicker.show()
                self.RGB3ColorPicker.exec_()
                RGB3Color=self.RGB3ColorPicker.selectedColor()
                red=RGB3Color.red()
                green=RGB3Color.green()
                blue = RGB3Color.blue()
                url="https://ibsbus.herokuapp.com/rgbapi/rgb/3/"
                #payload={"id":3,"device_name":"RGB3","red":233,"green":43,"blue":43}
                payload={"id":3,"device_name":"RGB3","red":red,"green":green,"blue":blue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
                print(response.text)
        except:
                pass
    def RGB4ColorPicker(self):#open color picker for RGB4
        try:
                        
                self.RGB4ColorPicker=QColorDialog()
                self.RGB4ColorPicker.show()
                self.RGB4ColorPicker.exec_()
                RGB4Color=self.RGB4ColorPicker.selectedColor()
                red=RGB4Color.red()
                green=RGB4Color.green()
                blue = RGB4Color.blue()
                url="https://ibsbus.herokuapp.com/rgbapi/rgb/4/"
                #payload={"id":4,"device_name":"RGB4","red":233,"green":43,"blue":43}
                payload={"id":4,"device_name":"RGB4","red":red,"green":green,"blue":blue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
                print(response.text)
        except:
                pass


    def Dimmer1Value(self):#Dimmer 1 Value Change
        try:
                Dimmer1PostValue=self.VerticalSliderDimmer1.value()
                #sending put request to the server
                url = "https://ibsbus.herokuapp.com/rgbapi/dimmer/1/"
                #payload={"id":1,"device_name":"Dimmer1","brigtness":125}
                #change brigtness to Dimmer1PostValue
                payload = {"id":1,"device_name":"Dimmer1","brigtness":Dimmer1PostValue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
        except:
                pass


    def Dimmer2Value(self):#Dimmer 2 Value Change
        try:
                Dimmer2PostValue=self.VerticalSliderDimmer2.value()
                #sending put request to the server
                url = "https://ibsbus.herokuapp.com/rgbapi/dimmer/2/"
                #payload={"id":2,"device_name":"Dimmer2","brigtness":125}
                #change brigtness to Dimmer1PostValue
                payload = {"id":2,"device_name":"Dimmer2","brigtness":Dimmer2PostValue}
                headers = {'content-type': 'application/json'}
                response = requests.put(url, data=json.dumps(payload), headers=headers)
        except:
                pass

    

    def AddSongUSB(self):#Add song to USB
        dir_path = os.path.dirname("F:/")
        i=0
        for root, dirs, files in os.walk(dir_path):
            for file in files: 
                if file.endswith('.mp3'):
                    i = i+1
                    directory=os.path.join(root, file)
                    musiclist.append(directory)
                    self.SongListBox.addItem(file)
        if i==0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("No Songs in USB")
                msg.setWindowTitle("No Songs")
                msg.exec_()

    def PlaySongFromListUSB(self):#Play song from list in double click
        try:
            self.mute()
            self.player_iface.Pause()
        except:
            pass
        global play,current_song,songLength,count,index
        count = 0
        index = self.SongListBox.currentRow()      
        try:
            mixer.music.load(str(musiclist[index]))
            mixer.music.play()
            play =True
            current_song = index
            song_name=musiclist[index]
            song_name=song_name.split("\\")
            song_name=song_name[-1]
            song_name=song_name.split(".")
            self.SongNameUSBLabel.setText(song_name[0])
            self.ProgressBarTimer.start()
            sound = MP3(str(musiclist[index]))
            songLength = sound.info.length
            songLength =round(songLength)
            min,sec=divmod(songLength,60)
            #Total song length
            length=str(min)+":"+str(sec)
            self.SongTotalTimeLabel.setText(length)
        except:
            pass
    def PlaySongUSB(self):#Play/Pause song from USB
        try:
            self.mute()
            self.player_iface.Pause()
        except:
            pass
        global play,current_song,songLength,count,index
        
        if play == False:
            if current_song == index:
                icon11 = QtGui.QIcon()
                icon11.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PauseSongIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.PlaySongUSBButton.setIcon(icon11)
                play = True
                self.ProgressBarTimer.start()
                mixer.music.unpause()

            else:   
                try:
                    count = 0
                    mixer.music.load(musiclist[index])
                    song_name=musiclist[index]
                    song_name=song_name.split("\\")
                    song_name=song_name[-1]
                    song_name=song_name.split(".")
                    self.SongNameUSBLabel.setText(song_name[0])
                    mixer.music.play()
                    current_song = index
                    self.ProgressBarTimer.start()
                    sound = MP3(str(musiclist[index]))
                    songLength = sound.info.length
                    songLength =round(songLength)
                    min,sec=divmod(songLength,60)
                    #Total song length
                    length=str(min)+":"+str(sec)
                    self.SongTotalTimeLabel.setText(length)
                except:
                    pass 
            play = True        
        elif play ==True:
            icon11 = QtGui.QIcon()
            icon11.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.PlaySongUSBButton.setIcon(icon11)
        
            play = False
            self.ProgressBarTimer.stop()
            mixer.music.pause()
    def PreviousSongUSB(self):#Previous song from USB
        try:
            self.mute()
            self.player_iface.Pause()
        except:
            pass
        global play,current_song,songLength,count,index
        if index ==0:
            index = len(musiclist)-1
        else:
            index-=1    
        try:
            count = 0
            mixer.music.load(musiclist[index])
            mixer.music.play()
            current_song = index
            self.ProgressBarTimer.start()
            sound = MP3(str(musiclist[index]))
            songLength = sound.info.length
            songLength =round(songLength)
            min,sec=divmod(songLength,60)
            song_name=musiclist[index]
            song_name=song_name.split("\\")
            song_name=song_name[-1]
            song_name=song_name.split(".")
            self.SongNameUSBLabel.setText(song_name[0])
            #Total song length
            length=str(min)+":"+str(sec)
            self.SongTotalTimeLabel.setText(length)

         
        except:
            pass
    def NextSongUSB(self):#Next song from USB
        try:
            self.mute()
            self.player_iface.Pause()
        except:
            pass
        global play,current_song,songLength,count,index
        if index ==len(musiclist)-1:
            index = 0
        else:
            index+=1    
        try:
            count = 0
            mixer.music.load(musiclist[index])
            mixer.music.play()
            current_song = index
            self.ProgressBarTimer.start()
            sound = MP3(str(musiclist[index]))
            songLength = sound.info.length
            songLength =round(songLength)
            min,sec=divmod(songLength,60)
            song_name=musiclist[index]
            song_name=song_name.split("\\")
            song_name=song_name[-1]
            song_name=song_name.split(".")
            self.SongNameUSBLabel.setText(song_name[0])
            #Total song length
            length=str(min)+":"+str(sec)
            self.SongTotalTimeLabel.setText(length)            
        except:
            pass
    def updateprogressbar(self):#Update progress bar
        global count,songLength
        count +=1
        self.ProgressBarUSB.setValue(count)
        self.SongCurrentTimeLabel.setText("%02d:%02d"%(count/60,count%60))
       
        if count == songLength:
            self.ProgressBarTimer.stop()
            self.NextSongUSB()

    def StartBackCamera(self):#Start Back Camera

        self.capture=cv2.VideoCapture("rtsp://192.168.100.66/1/")
        self.Camera1Timer=QTimer()
        self.Camera1Timer.timeout.connect(self.update_frame)
        a = 1
        self.Camera1Timer.start(a)

    def update_frame(self):#Update frame of Back Camera
        try:
            
            ret,self.image=self.capture.read()
            #self.image=cv2.flip(self.image,1)
            qformat=QImage.Format_Indexed8
            if len(self.image.shape)==3:
                if self.image.shape[2]==4:
                    qformat=QImage.Format_RGBA8888
                else:
                    qformat=QImage.Format_RGB888
            outImage=QImage(self.image,self.image.shape[1],self.image.shape[0],self.image.strides[0],qformat)
            outImage=outImage.rgbSwapped()
            self.BackCameraView.setPixmap(QPixmap.fromImage(outImage))
            self.BackCameraView.setScaledContents(True)
        except:
            pass
    def StopBackCamera(self):#Stop Back Camera
            self.Camera1Timer.stop()
    def GalleryViewFunction(self):
        self.BackCameraView.setGeometry(QtCore.QRect(130, 0, 510, 325))
        self.FrontCameraView.show()
        self.BackCameraView.show()
        self.Camera1View.show()
        self.Camera2View.show()
    def BackCameraViewFunction(self):
        self.BackCameraView.setGeometry(QtCore.QRect(130, 0, 1025,665))
        self.FrontCameraView.hide()
        self.BackCameraView.show()
        
        #self.StartBackCamera()
        self.Camera1View.hide()
        self.Camera2View.hide()

 # Bluetooth Function functions
    def BluetoothStart (self):#Call this function with timer
        try:
                for path, ifaces in self.mgr.GetManagedObjects().items():
                        if 'org.bluez.MediaPlayer1' in ifaces:
                                print("connected")
                                self.player_iface = dbus.Interface(
                                self.bus.get_object('org.bluez', path),
                                'org.bluez.MediaPlayer1')
                
                        elif 'org.bluez.MediaTransport1' in ifaces:
                                self.transport_prop_iface = dbus.Interface(
                                self.bus.get_object('org.bluez', path),
                                'org.freedesktop.DBus.Properties')
                time.sleep(1)
                self.bus.add_signal_receiver(
                self.on_property_changed,
                bus_name='org.bluez',
                signal_name='PropertiesChanged',
                dbus_interface='org.freedesktop.DBus.Properties')

        except:
            pass
        
    def on_property_changed(self,interface, changed, invalidated):
        if interface != 'org.bluez.MediaPlayer1':
            return
        for prop, value in changed.items():
            if prop == 'Status':
                #print('Playback Status: {}'.format(value))
                self.status = value
                if self.status == "playing":
                        icon11 = QtGui.QIcon()
                        icon11.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                        self.PlaySongBTButton.setIcon(icon11)
                elif self.status == "paused":
                        icon7 = QtGui.QIcon()
                        icon7.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PauseSongIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                
                        self.PlaySongBTButton.setIcon(icon7)
            elif prop == 'Track':
                self.track = value
                for key in ('Title', 'Artist', 'Album'):
                    #print('   {}: {}'.format(key, value.get(key, '')))                    
                    self.SongNameBTLabel.setText(value.get("Title"))
                    self.AlbumNameBTLabel.setText(value.get("Album"))
                    self.ArtistNameBTLabel.setText(value.get("Artist"))

    def Play_Pause_BT(self):
        try:
            self.mute()
            #self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        play = False
        try:
            if self.status == "playing":
                self.player_iface.Pause()
                icon11 = QtGui.QIcon()
                icon11.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PlayButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.PlaySongBTButton.setIcon(icon11)
                
                self.status = "paused"
            elif self.status == "paused":
                icon7 = QtGui.QIcon()
                icon7.addPixmap(QtGui.QPixmap(":/NotificationPanel/icons/PauseSongIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.PlaySongBTButton.setIcon(icon7)
        
                self.player_iface.Play()
                self.status = "playing"
        except :
            pass
            #print(inst)

    
    def next_song_BT(self):
        try:
            self.mute()
            #self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            play = False
            self.player_iface.Next()
        except:
            pass
            #print("next exc")

        
    
    def previous_song_BT(self):
        try:
            self.mute()
            #self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            play = False
            self.player_iface.Previous()
        except:
            pass
            #print("prev excep")    
             
#FM Functions
    def init_radio(self,address):
        try:
                """initialize hardware"""
                i2c.write_quick(address)
                time.sleep(0.1)
        except :
                pass


    def set_freq(self,address, freq):
        """set Radio to specific frequency"""
        freq14bit = int (4 * (freq * 1000000 + 225000) / 32768) # Frequency distribution for two bytes (according to the data sheet)
        freqH = freq14bit>>8 #int (freq14bit / 256)
        freqL = freq14bit & 0xFF

        data = [0 for i in range(4)] # Descriptions of individual bits in a byte - viz.  catalog sheets
        init = freqH # freqH # 1.bajt (MUTE bit; Frequency H)  // MUTE is 0x80
        data[0] = freqL # 2.bajt (frequency L)
        data[1] = 0xB0 #0b10110000 # 3.bajt (SUD; SSL1, SSL2; HLSI, MS, MR, ML; SWP1)
        data[2] = 0x10 #0b00010000 # 4.bajt (SWP2; STBY, BL; XTAL; smut; HCC, SNC, SI)
        data[3] = 0x00 #0b00000000 # 5.bajt (PLREFF; DTC; 0; 0; 0; 0; 0; 0)
        try:
            i2c.write_i2c_block_data (address, init, data) # Setting a new frequency to the circuit
            #print("Frequency set to: " + str(freq))
        except :
            pass
    def mute(self):
        """"mute radio"""
        freq14bit = int(4 * (0 * 1000000 + 225000) / 32768)
        freqL = freq14bit & 0xFF
        data = [0 for i in range(4)]
        init = 0x80
        data[0] = freqL
        data[1] = 0xB0
        data[2] = 0x10
        data[3] = 0x00
        try:
                i2c.write_i2c_block_data(i2c_address, init, data)
                #print("Radio Muted")
        except :
                pass



    def nextSingle_fm(self):#Single Clicked
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            if self.freq >108.0 :
                self.freq = 88.0
            self.freq = self.freq + 0.1
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def prevSingle_fm(self):#single Clicked
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            if self.freq <88.0:
                self.freq = 108.0
            self.freq = self.freq - 0.1
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def nextDouble_fm(self):#Double Clicked
        #print("Next FM")
        self.player_iface.Pause()
        self.freq = self.freq + 1
        label = self.freq #change label of fm title
        self.ChannelFrequencyLabel.setText(label)
        self.set_freq(i2c_address, self.freq)

    def prevDouble_fm(self):#Double Clicked
        #print("Previous FM")
        self.player_iface.Pause()
        self.freq = self.freq - 1
        label = self.freq #change label of fm title
        self.ChannelFrequencyLabel.setText(label)
        self.set_freq(i2c_address, self.freq)

        
    def Channel1ButtonClicked(self):
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            self.freq = 93.5
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def Channel2ButtonClicked(self):
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            self.freq = 94.3
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def Channel3ButtonClicked(self):
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            self.freq = 98.3
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def Channel4ButtonClicked(self):
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            self.freq = 101.6
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass
    def Channel5ButtonClicked(self):
        try:
            #self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
        try:
            self.freq = 106.6
            label = self.freq #change label of fm title
            self.ChannelFrequencyLabel.setText(str(label))                                     
            self.set_freq(i2c_address, self.freq)
        except:
            pass      


    def RelayOn(self):
        print("Relay on")
        GPIO.output(Relay, True)
    def RelayOFF(self):
        print("Relay off")
        GPIO.output(Relay, False)
    def Person1Api(self):
        print("Person 1")
        try:
            self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
    def Person2Api(self):
        print("Person 2")
        try:
            self.mute()
            self.player_iface.Pause()
            self.PlaySongUSB()
        except:
            pass
    def Person3Api(self):
        print("Person 3")
        try:
                self.mute()
                self.player_iface.Pause()
                self.PlaySongUSB()
        except:
                pass
    def Person4Api(self):
        #ADD API CALLING
        print("Person 4")
        try:
                self.mute()
                self.player_iface.Pause()
                self.PlaySongUSB()
        except:
                pass
    def Person5Api(self):
        print("Person 5")
        try:
                self.mute()
                self.player_iface.Pause()
                self.PlaySongUSB()
        except:
                pass



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.showFullScreen()
    sys.exit(app.exec_())


